# azure-pipelines.yml
trigger:
  - main
  - develop

variables:
  - group: azure-credentials
  - name: containerRegistry
    value: '$(azureContainerRegistry)'
  - name: imagePullSecret
    value: 'acr-secret'
  - name: tag
    value: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    # .NET Backend Build
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET Backend'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Backend'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release'
    
    - task: DotNetCoreCLI@2
      displayName: 'Test .NET Backend'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
    
    # React Frontend Build
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'
    
    - script: |
        cd frontend
        npm install
        npm run build
      displayName: 'Build React Frontend'
    
    # Docker Build and Push
    - task: PowerShell@2
      displayName: 'Build and Push .NET Backend'
      inputs:
        targetType: 'inline'
        script: |
          docker build -t $(containerRegistry)/dotnet-backend:$(tag) -f **/Dockerfile.backend .
          docker push $(containerRegistry)/dotnet-backend:$(tag)
    
    - task: PowerShell@2
      displayName: 'Build and Push React Frontend'
      inputs:
        targetType: 'inline'
        script: |
          docker build -t $(containerRegistry)/react-frontend:$(tag) -f **/Dockerfile.frontend .
          docker push $(containerRegistry)/react-frontend:$(tag)

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  condition: succeeded()
  
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to AKS'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: 'Apply Nginx ConfigMap'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(azureSubscription)'
              azureResourceGroup: '$(resourceGroupName)'
              kubernetesCluster: '$(aksClusterName)'
              namespace: 'default'
              command: 'apply'
              arguments: '-f $(System.ArtifactsDirectory)/k8s/nginx-configmap.yaml'
          
          - task: Kubernetes@1
            displayName: 'Deploy to Kubernetes'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(azureSubscription)'
              azureResourceGroup: '$(resourceGroupName)'
              kubernetesCluster: '$(aksClusterName)'
              namespace: 'default'
              command: 'apply'
              arguments: '-f $(System.ArtifactsDirectory)/k8s/*.yaml'